/*
	РђРІС‚РѕСЂ: РђС…С‚Р°СЂРµРµРІ Рђ.Р .
	Р—Р°РјРµС‚РєРё РіРґРµ РІ РЅР°С‡Р°Р»Рµ СѓСЃС‚Р°РЅРѕРІР»РµРЅ РєРѕРјРµРЅС‚Р°СЂРёР№ *?*
	С‚Рѕ Р·РЅР°С‡РёС‚ РЅСѓР¶РЅРѕ РЅР°СЃС‚СЂРѕРёС‚СЊ РµРіРѕ

	РџСЂР°РІРёР»Рѕ РёРЅС†РёР°Р»РёР·Р°С†РёР№:
	- РїРµСЂРІРѕРµ sxInit
	- РїРѕСЃР»Рµ РѕСЃС‚Р°Р»СЊРЅС‹Рµ С„СѓРЅРєС†РёР№ РїРѕ РЅСѓР¶РґРµ (crc, header, crystal, fifo)

	Р’СЃРµ РїРµСЂРµРЅР°СЃС‚СЂРѕРёРєРё РїСЂРѕРёР·РІРѕРґРёС‚СЊ РІ СЃРїСЏС‰РёРј СЂРµР¶РёРјРµ.
*/


#include "sx/sx_conf.h"
#include "sx/sx_define.h"
#include "sx/sx_spi.h"
#include "sx/sx_status.h"

/*-----------------------------------------------------------------------------------------------*/
//INIT

// Р¤СѓРЅРєС†РёСЏ РёРЅРёС†РёР»РёР·Р°С†РёР№ СЂР°РґРёРѕ С‡Р°СЃС‚РѕС‚С‹
uint8_t sxInit(void);

// Р¤СѓРЅРєС†РёСЏ РґР»СЏ РїРµСЂРµРєР»СЋС‡РµРЅРёСЏ СЂРµР¶РёРјРѕРІ
int8_t sxOpMode(uint8_t MODE_DEFINE);

// РџСЂРѕС‡РёС‚Р°С‚СЊ РІ РєР°РєРѕРј СЂРµР¶РёРјРµ sx
uint8_t sxOpModeReturn(void);

// РќР°СЃС‚СЂРѕРёРєР° С‡Р°СЃС‚РѕС‚С‹ РєР°РЅР°Р»Р°
int8_t sxFRF(int frf_gerc /* РІ РіРµСЂС†Р°С…*/,  int frequency_gerc /* РІ РіРµСЂС†Р°С…*/);

// РџСЂРѕРІРµСЂРєР° С‚Рѕ С‡С‚Рѕ РІРєР»СЋС‡РµРЅ СЂРµР¶РёРј Р›РѕСЂР°
bool sxLoraOn(uint8_t * status_spi);

// РЈСЃС‚Р°РЅР°РІР»РёРІР°РµРј СЂРµР¶РёРј РѕР±РјРµРЅР° РґР°РЅРЅС‹С… Р»РѕСЂР°-РІР°РЅ
int8_t sxSyncWord(uint8_t sw);

// РЈСЃС‚Р°РЅР°РІР»РёРІР°РµРј РґР»РёРЅСѓ РїСЂРµР°РјР±СѓР»С‹
int8_t sxPreamble(uint16_t preamble_length);

// РџСЂРѕС‡РµСЃС‚СЊ РґР»РёРЅСѓ РїСЂРµР°РјР±СѓР»С‹
uint16_t sxPreamleLength(uint8_t * status_spi);

//
int8_t sxSpreadingFactor(uint8_t sf/*6-12*/);

//
int8_t sxCodingRate(uint8_t cr /*5-8*/);

//
int8_t sxBandwidth(uint16_t bw);

int8_t sxSymbTimeout(uint16_t timeout);

/*-----------------------------------------------------------------------------------------------*/
//FIFO

// РЈРєР°Р·С‹РІР°РµРј РјР°РєСЃРёРјР°Р»СЊРЅСѓСЋ РґР»РёРЅСѓ РїР°РєРµС‚Р°, РїСЂРё РїСЂРёРµРјРµ Рё РїРµСЂРµРґР°С‡Рё
int8_t sxMaxPayloadLength(uint8_t pauload_length);

// РЈСЃС‚Р°РЅР°РІР»РёРІР°РµРј Р±Р°Р·РѕРІС‹Рµ СѓРєР°Р·Р°С‚РµР»Рё rx/tx
int8_t sxFifoTxRxBaseAddr(uint8_t rx/*0x00*/, uint8_t tx/*0x80*/); // max 0xff

//
uint8_t sxInfoFifoRxBaseAddr(uint8_t * status_spi);

//
uint8_t sxInfoFifoTxBaseAddr(uint8_t * status_spi);

// Р¤СѓРЅРєС†РёСЏ РєРѕС‚РѕСЂР°СЏ СѓСЃС‚Р°РЅР°РІР»РёРІР°РµС‚ СѓРєР°Р·Р°С‚РµР»СЊ (Р°РґСЂРµСЃСЃ) FIFO
uint8_t sxFifoAddrPrt(uint8_t address, uint8_t * status_spi);

// Р’РѕР·РІСЂР°С‰Р°РµС‚ РЅР°С‡Р°Р»СЊРЅС‹Р№ Р°РґСЂРµСЃСЃ РїРѕСЃР»РµРґРЅРµРіРѕ РїРѕР»СѓС‡РµРЅРЅРѕРіРѕ РїР°РєРµС‚Р°
uint8_t sxFifoRxCurrentAddr(uint8_t * status_spi);

// РўРµРєСѓС‰РµРµ Р·РЅР°С‡РµРЅРёРµ СѓРєР°Р·Р°С‚РµР»СЏ Р±СѓС„РµСЂР° РґР°РЅРЅС‹С… RX
uint8_t sxFifoRxByteAddr(uint8_t * status_spi);

// РљРѕР»РёС‡РµСЃС‚РІРѕ Р±Р°Р№С‚ РїРѕР»РµР·РЅРѕР№ РЅР°РіСЂСѓР·РєРё РїРѕСЃР»РµРґРЅРµРіРѕ РїРѕР»СѓС‡РµРЅРЅРѕРіРѕ РїР°РєРµС‚Р°
uint8_t sxFifoRxNbBytes(uint8_t * status_spi);

// Р¤СѓРЅРєС†РёСЏ РґР»СЏ РїРµСЂРµРґР°С‡Рё Р±Р°Р№С‚Р° (FIFO)
int8_t sxWriteByteFifoNew(uint8_t byte_data);

// Р¤СѓРЅРєС†РёСЏ РґР»СЏ С‡С‚РµРЅРёСЏ Р±Р°Р№С‚Р° СЃ (FIFO)
uint8_t sxReadByteFifoNew(uint8_t * status_spi);

//END FIFO
/*-----------------------------------------------------------------------------------------------*/

/*-----------------------------------------------------------------------------------------------*/
//INIT CONT.

// Р¤СѓРЅРєС†РёСЏ Р·Р°РґР°РµС‚ РєРѕР»РІРѕ Р±Р°Р№С‚ РІ РїР°РєРµС‚Рµ, РїСЂРё РѕС‚СЃСѓС‚СЃРІРёСЏ Р·Р°РіРѕР»РѕРІРєР°
int8_t sxPayloadLength(uint8_t len);

// Р¤СѓРЅРєС†РёСЏ РѕС‚РІРµС‡Р°РµС‚ Р·Р° РїСЂРµСЂС‹РІР°РЅРёРµ 1-РІРєР» 0-РІС‹РєР»
int8_t InitIrFlags(uint8_t flags);

// Р¤СѓРЅРєС†РёСЏ РѕС‚РІРµС‡Р°РµС‚ Р·Р° С‡С‚РµРЅРёРµ РїСЂРµСЂС‹РІР°РЅРёРµ 1-РІРєР» 0-РІС‹РєР». Рё СЃСЂР°Р·Сѓ Р¶Рµ РѕР±РЅСѓР»СЏРµРј Р·Р°РїРёСЃС‹РІР°СЏ 1
uint8_t ReadIrFlags(bool clear, uint8_t * status_spi);

// Р¤СѓРЅРєС†РёСЏ РґР»СЏ РІРєР» Рё РѕС‚РєР»СЋС‡РµРЅРёСЏ crc payload
int8_t sxCrc(bool crc);

//Р¤СѓРЅРєС†РёСЏ РґР»СЏ РІРєР» Рё РѕС‚РєР»СЋС‡РµРЅРёСЏ Р·Р°РіРѕР»РѕРІРєР°, 0 - Explicit Header mode СЏРІРЅС‹Р№, 1 - Implicit Header mode РЅРµСЏРІРЅРѕРіРѕ
int8_t sxHeader(bool header);

// Р¤СѓРЅРєС†РёСЏ РґР»СЏ РїСЂРѕРІРµСЂРєРё СЃС‚Р°С‚СѓСЃР° crc
bool sxStatusCrc(uint8_t * status_spi);

// Р¤СѓРЅРєС†РёСЏ РґР»СЏ РїСЂРѕРІРµСЂРєРё СЃС‚Р°С‚СѓСЃР° header
bool sxStatusHeader(uint8_t * status_spi);

// Р РµР¶РёРј СЂР°Р±РѕС‚С‹ РїРµСЂРµРґР°С‡РёРєР°
uint8_t modeTx(uint8_t * array_bute, uint8_t length, uint8_t * return_error);

// Р РµР¶РёРј СЂР°Р±РѕС‚С‹ РїСЂРёРµРјРЅРёРєР°
uint8_t modeRx(uint8_t * array_byte, uint8_t * return_error);
/*-----------------------------------------------------------------------------------------------*/
//CONFIG
#if stateRegSx
uint8_t initFunctionDefaultRegSx(uint8_t reg, uint8_t con, uint8_t data);
#endif

/*-----------------------------------------------------------------------------------------------*/

































